# ==============================================================================
# DiscoveryLastFM Docker Compose Stack
# Complete setup with optional services for music discovery
# ==============================================================================

version: '3.8'

# ==============================================================================
# Networks
# ==============================================================================
networks:
  discoverylastfm:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  # DiscoveryLastFM volumes
  discoverylastfm_config:
    driver: local
  discoverylastfm_logs:
    driver: local
  discoverylastfm_cache:
    driver: local
  
  # Lidarr volumes (optional)
  lidarr_config:
    driver: local
  lidarr_music:
    driver: local
  
  # Redis cache (optional)
  redis_data:
    driver: local

# ==============================================================================
# Services
# ==============================================================================
services:

  # --------------------------------------------------------------------------
  # DiscoveryLastFM - Main Application
  # --------------------------------------------------------------------------
  discoverylastfm:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: mrrobotogit/discoverylastfm:latest
    container_name: discoverylastfm
    hostname: discoverylastfm
    restart: unless-stopped
    
    # Environment configuration
    environment:
      # === OPERATION MODE ===
      - DISCOVERY_MODE=cron              # sync, cron, daemon, test
      - CRON_SCHEDULE=0 3 * * *          # Daily at 3 AM
      - DRY_RUN=false                    # Set to true for testing
      - DEBUG=false                      # Enable debug logging
      
      # === MUSIC SERVICE ===
      - MUSIC_SERVICE=lidarr             # headphones or lidarr
      
      # === LAST.FM CONFIGURATION ===
      - LASTFM_USERNAME=${LASTFM_USERNAME}
      - LASTFM_API_KEY=${LASTFM_API_KEY}
      
      # === LIDARR CONFIGURATION ===
      - LIDARR_API_KEY=${LIDARR_API_KEY}
      - LIDARR_ENDPOINT=http://lidarr:8686
      - LIDARR_ROOT_FOLDER=/music
      - LIDARR_QUALITY_PROFILE_ID=1
      - LIDARR_METADATA_PROFILE_ID=1
      - LIDARR_MONITOR_MODE=all
      - LIDARR_SEARCH_ON_ADD=true
      
      # === HEADPHONES CONFIGURATION (Alternative) ===
      # Uncomment if using Headphones instead of Lidarr
      # - HP_API_KEY=${HP_API_KEY}
      # - HP_ENDPOINT=http://headphones:8181
      
      # === DISCOVERY PARAMETERS ===
      - RECENT_MONTHS=3
      - MIN_PLAYS=20
      - SIMILAR_MATCH_MIN=0.46
      - MAX_SIMILAR_PER_ART=20
      - MAX_POP_ALBUMS=5
      - CACHE_TTL_HOURS=24
      
      # === API RATE LIMITING ===
      - REQUEST_LIMIT=0.2
      - MBZ_DELAY=1.1
      
      # === CONTAINER PATHS ===
      - CONFIG_PATH=/app/config/config.py
      - LOG_PATH=/app/logs
      - CACHE_PATH=/app/cache
    
    # Volume mounts
    volumes:
      - discoverylastfm_config:/app/config
      - discoverylastfm_logs:/app/logs
      - discoverylastfm_cache:/app/cache
      
      # Optional: Mount external config
      # - ./config/config.py:/app/config/config.py:ro
      
      # Optional: Mount music directory (for Lidarr compatibility)
      # - /path/to/music:/music:ro
    
    # Network configuration
    networks:
      - discoverylastfm
    
    # Health check
    healthcheck:
      test: ["/usr/local/bin/health-check", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Dependencies
    depends_on:
      lidarr:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Labels for management
    labels:
      - "com.discoverylastfm.service=main"
      - "com.discoverylastfm.version=2.1.0"
      - "traefik.enable=false"  # Disable reverse proxy by default

  # --------------------------------------------------------------------------
  # Lidarr - Music Collection Manager
  # --------------------------------------------------------------------------
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Rome
      - UMASK=002
    
    volumes:
      - lidarr_config:/config
      - lidarr_music:/music
      # Mount your actual music directory
      # - /path/to/your/music:/music
      # - /path/to/your/downloads:/downloads
    
    ports:
      - "8686:8686"
    
    networks:
      - discoverylastfm
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8686/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    labels:
      - "com.discoverylastfm.service=lidarr"
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.local`)"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  # --------------------------------------------------------------------------
  # Redis - Cache Service (Optional)
  # --------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: discoverylastfm-redis
    hostname: redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    networks:
      - discoverylastfm
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    labels:
      - "com.discoverylastfm.service=cache"

  # --------------------------------------------------------------------------
  # Watchtower - Auto Updates (Optional)
  # --------------------------------------------------------------------------
  watchtower:
    image: containrrr/watchtower:latest
    container_name: discoverylastfm-watchtower
    restart: unless-stopped
    
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Check daily
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    networks:
      - discoverylastfm
    
    labels:
      - "com.discoverylastfm.watchtower=true"
      - "com.discoverylastfm.service=updater"

  # --------------------------------------------------------------------------
  # Portainer - Container Management (Optional)
  # --------------------------------------------------------------------------
  portainer:
    image: portainer/portainer-ce:latest
    container_name: discoverylastfm-portainer
    restart: unless-stopped
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    
    ports:
      - "9000:9000"
    
    networks:
      - discoverylastfm
    
    labels:
      - "com.discoverylastfm.service=management"
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.local`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

# ==============================================================================
# Additional Volumes for Optional Services
# ==============================================================================
  portainer_data:
    driver: local