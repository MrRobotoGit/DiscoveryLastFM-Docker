# ==============================================================================
# DiscoveryLastFM Docker Security Updates
# Weekly security scans and updates for base images and dependencies
# ==============================================================================

name: Docker Security Updates

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no vulnerabilities found'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: discoverylastfm

jobs:
  
  # ==========================================================================
  # Security Scan
  # ==========================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      has-vulnerabilities: ${{ steps.scan.outputs.has-vulnerabilities }}
      scan-results: ${{ steps.scan.outputs.scan-results }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Pull latest image
        run: |
          docker pull mrrobotogit/discoverylastfm:latest || echo "Image not found, will build fresh"
      
      - name: Run Trivy vulnerability scanner
        id: scan
        run: |
          # Scan for HIGH and CRITICAL vulnerabilities
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workspace \
            aquasec/trivy:latest image \
            --format json \
            --severity HIGH,CRITICAL \
            --output /workspace/trivy-results.json \
            mrrobotogit/discoverylastfm:latest || true
          
          # Check if vulnerabilities were found
          if [ -f trivy-results.json ]; then
            VULN_COUNT=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-results.json 2>/dev/null || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
              echo "Found $VULN_COUNT high/critical vulnerabilities"
            else
              echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
              echo "No high/critical vulnerabilities found"
            fi
          else
            echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "No scan results (image may not exist)"
          fi
          
          # Save scan results for reporting
          if [ -f trivy-results.json ]; then
            echo "scan-results<<EOF" >> $GITHUB_OUTPUT
            jq -r '.Results[]?.Vulnerabilities[]? | "\(.VulnerabilityID): \(.Severity) - \(.Title)"' trivy-results.json | head -20 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.json
          retention-days: 30
      
      - name: Create security report
        if: steps.scan.outputs.has-vulnerabilities == 'true'
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ⚠️ Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### High/Critical Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.scan.outputs.scan-results }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A security update will be triggered automatically." >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # Security Update Build
  # ==========================================================================
  security-update:
    name: Security Update Build
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.has-vulnerabilities == 'true' || github.event.inputs.force_rebuild == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate security update metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/mrrobotogit/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=security-{{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=DiscoveryLastFM Security Update
            org.opencontainers.image.description=Security-updated build of DiscoveryLastFM
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version=security-update
      
      - name: Prepare build context
        run: |
          mkdir -p build-context
          
          if [ -d "../DiscoveryLastFM" ]; then
            cp -r ../DiscoveryLastFM/DiscoveryLastFM.py build-context/
            cp -r ../DiscoveryLastFM/services build-context/ 2>/dev/null || mkdir -p build-context/services
            cp -r ../DiscoveryLastFM/utils build-context/ 2>/dev/null || mkdir -p build-context/utils
          else
            echo "# Security update build" > build-context/DiscoveryLastFM.py
            mkdir -p build-context/{services,utils}
          fi
      
      - name: Build and push security update
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true  # Force fresh build for security updates
          provenance: true
          sbom: true
      
      - name: Verify security update
        run: |
          # Pull the updated image
          docker pull mrrobotogit/discoverylastfm:latest
          
          # Run security scan on updated image
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --format table \
            --severity HIGH,CRITICAL \
            mrrobotogit/discoverylastfm:latest
      
      - name: Create security update summary
        run: |
          echo "## 🔒 Security Update Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Security update published" >> $GITHUB_STEP_SUMMARY
          echo "**Updated Image:** \`mrrobotogit/discoverylastfm:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**Security Tag:** \`mrrobotogit/discoverylastfm:security-$(date +%Y%m%d-%H%M%S)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Update Instructions:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull the security update" >> $GITHUB_STEP_SUMMARY
          echo "docker pull mrrobotogit/discoverylastfm:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Restart your containers" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose pull" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # Dependency Updates
  # ==========================================================================
  dependency-check:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check for package updates
        run: |
          # Install pip-tools for dependency checking
          pip install pip-tools
          
          # Check if requirements need updates
          pip-compile --upgrade --dry-run requirements.txt > updated-requirements.txt
          
          # Compare with current requirements
          if ! diff -q requirements.txt updated-requirements.txt >/dev/null; then
            echo "dependencies-updated=true" >> $GITHUB_OUTPUT
            echo "## 📦 Dependency Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            diff requirements.txt updated-requirements.txt || true >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "dependencies-updated=false" >> $GITHUB_OUTPUT
            echo "## 📦 Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Create dependency update PR
        if: steps.check.outputs.dependencies-updated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "deps: update Python dependencies (security scan)"
          title: "🔒 Security: Update Python Dependencies"
          body: |
            ## 🔒 Security Dependency Update
            
            This PR updates Python dependencies as part of the weekly security scan.
            
            ### Changes:
            - Updated Python package versions to latest secure versions
            - Triggered by automated security scan
            
            ### Testing:
            - [ ] Docker build succeeds
            - [ ] Security scan passes
            - [ ] Container functionality verified
            
            **Auto-generated by security scan workflow**
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>
          branch: security/dependency-updates
          delete-branch: true

  # ==========================================================================
  # Security Report
  # ==========================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, security-update]
    if: always()
    
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: trivy-security-scan
          path: ./
        continue-on-error: true
      
      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 DiscoveryLastFM Security Report" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
          echo "**Workflow:** ${{ github.workflow }}" >> security-report.md
          echo "" >> security-report.md
          
          # Scan results
          echo "## Vulnerability Scan Results" >> security-report.md
          echo "" >> security-report.md
          if [ "${{ needs.security-scan.outputs.has-vulnerabilities }}" = "true" ]; then
            echo "**Status:** ⚠️ Vulnerabilities detected and patched" >> security-report.md
            echo "" >> security-report.md
            echo "### Detected Issues:" >> security-report.md
            echo "\`\`\`" >> security-report.md
            echo "${{ needs.security-scan.outputs.scan-results }}" >> security-report.md
            echo "\`\`\`" >> security-report.md
          else
            echo "**Status:** ✅ No high/critical vulnerabilities detected" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Actions Taken" >> security-report.md
          echo "" >> security-report.md
          if [ "${{ needs.security-update.result }}" = "success" ]; then
            echo "- ✅ Security update built and published" >> security-report.md
            echo "- ✅ Updated image available: \`mrrobotogit/discoverylastfm:latest\`" >> security-report.md
          elif [ "${{ needs.security-scan.outputs.has-vulnerabilities }}" = "false" ]; then
            echo "- ✅ No action required - no vulnerabilities found" >> security-report.md
          else
            echo "- ❌ Security update failed - manual intervention required" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- 🔄 Update your containers with: \`docker-compose pull && docker-compose up -d\`" >> security-report.md
          echo "- 📊 Monitor security advisories for used dependencies" >> security-report.md
          echo "- 🔍 Review logs for any unusual activity" >> security-report.md
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*Report generated automatically by GitHub Actions*" >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-$(date +%Y%m%d)
          path: security-report.md
          retention-days: 90